import asyncio
import os
import aiohttp
import io
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart, Command
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import FSInputFile, URLInputFile, BufferedInputFile
from dotenv import load_dotenv
from loguru import logger

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# Store user search results
user_search_results = {}

async def cleanup_previous_search(user_id):
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if user_id in user_search_results:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            previous_results = user_search_results[user_id]
            chat_id = previous_results.get("chat_id")
            message_id = previous_results.get("message_id")
            
            if chat_id and message_id:
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
                await bot.delete_message(chat_id=chat_id, message_id=message_id)
                logger.info(f"–£–¥–∞–ª–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∏—Å–∫–µ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del user_search_results[user_id]

@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await cleanup_previous_search(message.from_user.id)
    user_name = message.from_user.first_name
    
    welcome_text = (
        f"<b>üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!</b>\n\n"
        "<b>üéµ HX Music Bot</b> - —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –º—É–∑—ã–∫–∏.\n\n"
        "<b>–ß—Ç–æ —è —É–º–µ—é:</b>\n"
        "‚Ä¢ –ò—Å–∫–∞—Ç—å —Ç—Ä–µ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
        "‚Ä¢ –°–∫–∞—á–∏–≤–∞—Ç—å –º—É–∑—ã–∫—É –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\n"
        "<b>üîç –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
        "1. –ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è\n"
        "2. –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        "3. –î–æ–∂–¥–∏—Å—å –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞–π—Å—è –º—É–∑—ã–∫–æ–π!\n\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
        url="https://t.me/crypthx"
    ))
    
    await message.answer(
        welcome_text,
        parse_mode=ParseMode.HTML,
        reply_markup=builder.as_markup()
    )

@dp.message(F.text & ~F.command)
async def search_track(message: types.Message):
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø–æ–∏—Å–∫
    await cleanup_previous_search(message.from_user.id)
    
    query = message.text.strip()
    if not query:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò—â—É..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    search_message = await message.answer(f"üîç –ò—â—É '{query}' –Ω–∞ SoundCloud...")
    
    try:
        async with aiohttp.ClientSession() as session:
            # SoundCloud API client ID (you'll need to get your own)
            client_id = os.getenv("SOUNDCLOUD_CLIENT_ID")
            if not client_id:
                await search_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SoundCloud API –∫–ª—é—á.")
                return
                
            # Search tracks via SoundCloud API
            url = f"https://api-v2.soundcloud.com/search/tracks?q={query}&client_id={client_id}&limit=100"
            
            async with session.get(url) as response:
                if response.status != 200:
                    await search_message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {response.status}")
                    return
                    
                data = await response.json()
                tracks = data.get("collection", [])
                
                if not tracks:
                    await search_message.edit_text("üòï –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
                    return
                
                # Store results for this user
                user_id = message.from_user.id
                user_search_results[user_id] = {
                    "tracks": tracks,
                    "current_page": 1,
                    "query": query,
                    "message_id": search_message.message_id,
                    "chat_id": search_message.chat.id
                }
                
                # Show first page of results (–≤ —Ç–æ–º –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–∏)
                await show_tracks_page(user_id, 1)
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç—Ä–µ–∫–æ–≤: {e}")
        await search_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")

async def show_tracks_page(user_id, page):
    if user_id not in user_search_results:
        return
        
    results = user_search_results[user_id]
    tracks = results["tracks"]
    query = results["query"]
    chat_id = results["chat_id"]
    message_id = results["message_id"]
    
    # Update current page
    results["current_page"] = page
    
    # Calculate start and end indices
    tracks_per_page = 10
    start_idx = (page - 1) * tracks_per_page
    end_idx = min(start_idx + tracks_per_page, len(tracks))
    
    # Prepare message text - –¥–µ–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ
    total_pages = (len(tracks) + tracks_per_page - 1) // tracks_per_page
    message_text = f"üéµ <b>–ü–æ–∏—Å–∫:</b> <i>{query}</i>\n\n"
    
    # Add tracks to the message - –≤ –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    for i in range(start_idx, end_idx):
        track = tracks[i]
        track_number = i - start_idx + 1  # –ù–æ–º–µ—Ä –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-10)
        title = track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        artist = track.get("user", {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
        duration_ms = track.get("duration", 0)
        duration_sec = duration_ms // 1000
        minutes = duration_sec // 60
        seconds = duration_sec % 60
        
        message_text += f"{track_number}. <b>{artist}</b> - <i>{title}</i> [{minutes}:{seconds:02d}]\n"
    
    # Create inline keyboard
    builder = InlineKeyboardBuilder()
    
    # Track selection buttons (1-10) –≤ –æ–¥–∏–Ω —Ä—è–¥ –ø–æ 5 –∫–Ω–æ–ø–æ–∫
    current_row = []
    for i in range(start_idx, end_idx):
        track_number = i - start_idx + 1  # –ù–æ–º–µ—Ä –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-10)
        current_row.append(types.InlineKeyboardButton(
            text=str(track_number),
            callback_data=f"track_{user_id}_{i}"
        ))
        
        # Create a new row after every 5 buttons
        if len(current_row) == 5:
            builder.row(*current_row)
            current_row = []
    
    # Add any remaining buttons
    if current_row:
        builder.row(*current_row)
    
    # Navigation buttons —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü
    nav_buttons = []
    
    # Previous page button
    if page > 1:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è",
            callback_data=f"page_{user_id}_{page-1}"
        ))
    
    # Page number indicator
    nav_buttons.append(types.InlineKeyboardButton(
        text=f"üìÑ {page}/{total_pages}",
        callback_data=f"noop"  # –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
    ))
    
    # Next page button
    if page < total_pages:
        nav_buttons.append(types.InlineKeyboardButton(
            text="‚û°Ô∏è",
            callback_data=f"page_{user_id}_{page+1}"
        ))
    
    if nav_buttons:
        builder.row(*nav_buttons)
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–≥–æ
    try:
        await bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=message_text,
            reply_markup=builder.as_markup(),
            parse_mode=ParseMode.HTML
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def get_track_stream_url(track_id, client_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä—è–º—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Ç—Ä–µ–∫–∞"""
    try:
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ø—ã—Ç–∫–∞ 1: Progressive download —á–µ—Ä–µ–∑ –≤–µ–±-API (–ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥)
            track_url = f"https://api-v2.soundcloud.com/tracks/{track_id}?client_id={client_id}"
            logger.info(f"–ü—Ä–æ–±—É–µ–º –≤–µ–± API: {track_url}")
            
            async with session.get(track_url) as response:
                if response.status == 200:
                    track_data = await response.json()
                    logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º media transcoding
                    if "media" in track_data and "transcodings" in track_data["media"]:
                        transcodings = track_data["media"]["transcodings"]
                        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(transcodings)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∫–∏")
                        
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º progressive —Ñ–æ—Ä–º–∞—Ç
                        for t in transcodings:
                            protocol = t.get("format", {}).get("protocol")
                            mime_type = t.get("format", {}).get("mime_type")
                            
                            if protocol == 'progressive':
                                logger.info(f"–ù–∞–π–¥–µ–Ω progressive —Ñ–æ—Ä–º–∞—Ç: {mime_type}")
                                stream_url = t.get("url")
                                if stream_url:
                                    async with session.get(f"{stream_url}?client_id={client_id}") as stream_response:
                                        if stream_response.status == 200:
                                            stream_data = await stream_response.json()
                                            return stream_data.get("url")
                        
                        # –ï—Å–ª–∏ progressive –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º HLS
                        for t in transcodings:
                            protocol = t.get("format", {}).get("protocol")
                            mime_type = t.get("format", {}).get("mime_type")
                            
                            if protocol in ['hls', 'hls_secure']:
                                logger.info(f"–ù–∞–π–¥–µ–Ω HLS —Ñ–æ—Ä–º–∞—Ç: {mime_type}")
                                stream_url = t.get("url")
                                if stream_url:
                                    async with session.get(f"{stream_url}?client_id={client_id}") as stream_response:
                                        if stream_response.status == 200:
                                            stream_data = await stream_response.json()
                                            return stream_data.get("url")

            # –ü–æ–ø—ã—Ç–∫–∞ 2: –ú–æ–±–∏–ª—å–Ω—ã–π API –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
            mobile_url = f"https://api-mobi.soundcloud.com/tracks/{track_id}?client_id={client_id}"
            logger.info(f"–ü—Ä–æ–±—É–µ–º –º–æ–±–∏–ª—å–Ω—ã–π API: {mobile_url}")
            
            async with session.get(mobile_url) as response:
                if response.status == 200:
                    data = await response.json()
                    stream_url = data.get('stream_url')
                    if stream_url:
                        full_url = f"{stream_url}?client_id={client_id}"
                        async with session.get(full_url, allow_redirects=True) as audio_response:
                            if audio_response.status == 200:
                                return str(audio_response.url)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –ø–æ—Ç–æ–∫–∞: {e}")
    
    logger.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å URL –ø–æ—Ç–æ–∫–∞ –Ω–µ —É–¥–∞–ª–∏—Å—å")
    return None

async def download_audio(url):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ –ø–æ URL"""
    try:
        timeout = aiohttp.ClientTimeout(total=300)  # 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
        async with aiohttp.ClientSession(timeout=timeout) as session:
            logger.info(f"–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –∞—É–¥–∏–æ —Å URL: {url}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ URL HLS –ø–ª–µ–π–ª–∏—Å—Ç–æ–º
            if '.m3u8' in url:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω HLS –ø–æ—Ç–æ–∫, –∑–∞–≥—Ä—É–∂–∞—é –ø–ª–µ–π–ª–∏—Å—Ç")
                async with session.get(url) as response:
                    if response.status != 200:
                        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HLS –ø–ª–µ–π–ª–∏—Å—Ç. –°—Ç–∞—Ç—É—Å: {response.status}")
                        return None
                        
                    playlist = await response.text()
                    segments = []
                    total_size = 0
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞
                    for line in playlist.split('\n'):
                        if line.startswith('http') and ('.mp3' in line or '.aac' in line or '.ts' in line):
                            segments.append(line)
                    
                    if not segments:
                        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞—É–¥–∏–æ —Å–µ–≥–º–µ–Ω—Ç—ã –≤ HLS –ø–ª–µ–π–ª–∏—Å—Ç–µ")
                        return None
                    
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(segments)} —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏")
                    all_data = bytearray()
                    
                    # –°–∫–∞—á–∏–≤–∞–µ–º –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã
                    for i, segment_url in enumerate(segments, 1):
                        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ–≥–º–µ–Ω—Ç–∞ {i}/{len(segments)}")
                        try:
                            async with session.get(segment_url) as segment_response:
                                if segment_response.status == 200:
                                    segment_data = await segment_response.read()
                                    all_data.extend(segment_data)
                                    total_size += len(segment_data)
                                    logger.info(f"–°–µ–≥–º–µ–Ω—Ç {i} –∑–∞–≥—Ä—É–∂–µ–Ω: {len(segment_data)} –±–∞–π—Ç")
                                else:
                                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ–≥–º–µ–Ω—Ç {i}. –°—Ç–∞—Ç—É—Å: {segment_response.status}")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ–≥–º–µ–Ω—Ç–∞ {i}: {e}")
                            continue
                    
                    if total_size < 100 * 1024:  # –ú–µ–Ω—å—à–µ 100 KB
                        logger.error(f"–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª: {total_size} –±–∞–π—Ç")
                        return None
                        
                    logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤—Å–µ —Å–µ–≥–º–µ–Ω—Ç—ã. –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024*1024):.2f} –ú–ë")
                    return bytes(all_data)
            
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö URL (–Ω–µ HLS)
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∞—É–¥–∏–æ —Å: {url}")
            async with session.get(url) as response:
                if response.status == 200:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                    content_length = response.headers.get('Content-Length')
                    if content_length:
                        size_mb = int(content_length) / (1024 * 1024)
                        logger.info(f"–û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {size_mb:.2f} –ú–ë")
                        if size_mb < 0.1:  # –ú–µ–Ω—å—à–µ 100 KB
                            logger.error("–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª")
                            return None
                    
                    data = await response.read()
                    file_size = len(data) / (1024 * 1024)
                    logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size:.2f} –ú–ë")
                    
                    if len(data) < 100 * 1024:  # –ú–µ–Ω—å—à–µ 100 KB
                        logger.error("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª")
                        return None
                        
                    return data
                else:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ. –°—Ç–∞—Ç—É—Å: {response.status}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞—É–¥–∏–æ: {e}")
    return None

@dp.callback_query(F.data.startswith("track_"))
async def process_track_selection(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[1])
    track_idx = int(parts[2])
    
    if user_id != callback.from_user.id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –ø–æ–∏—Å–∫!", show_alert=True)
        return
        
    if user_id not in user_search_results:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        return
        
    results = user_search_results[user_id]
    tracks = results["tracks"]
    query = results["query"]
    chat_id = results["chat_id"]
    message_id = results["message_id"]
    
    if track_idx >= len(tracks):
        await callback.answer("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤ inline —Ä–µ–∂–∏–º–µ
    await callback.answer("–ó–∞–≥—Ä—É–∂–∞—é —Ç—Ä–µ–∫...")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏, –¥–æ–±–∞–≤–ª—è—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ
    selected_track = tracks[track_idx]
    track_title = selected_track.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    artist = selected_track.get("user", {}).get("username", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    current_page = results["current_page"]
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await bot.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        text=f"‚è≥ <b>–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞:</b>\n<i>{artist} - {track_title}</i>...",
        reply_markup=None,
        parse_mode=ParseMode.HTML
    )
        
    try:
        track_id = selected_track.get("id")
        artwork_url = selected_track.get("artwork_url", "")
        permalink_url = selected_track.get("permalink_url", "")
        
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç—Ä–µ–∫–∞: {track_title} –æ—Ç {artist} (ID: {track_id})")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å artwork_url, –ø–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Å–∏—é –±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if artwork_url:
            artwork_url = artwork_url.replace("-large", "-t500x500")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
        client_id = os.getenv("SOUNDCLOUD_CLIENT_ID")
        if not client_id:
            logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω SoundCloud client ID")
            raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç SoundCloud client ID")
            
        stream_url = await get_track_stream_url(track_id, client_id)
        
        if not stream_url:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –ø–æ—Ç–æ–∫–∞")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await show_tracks_page(user_id, current_page)
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∞—É–¥–∏–æ", show_alert=True)
            return
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        audio_data = await download_audio(stream_url)
        
        if not audio_data:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
            await show_tracks_page(user_id, current_page)
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ", show_alert=True)
            return
        
        logger.info("–°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        # –°–æ–∑–¥–∞–µ–º BufferedInputFile –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
        audio_file = BufferedInputFile(
            audio_data,
            filename=f"{track_title}.mp3"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        caption = (f"üëâ <a href='https://t.me/hxmusic_robot'>–ò—â–∏ —Å–≤–æ–∏ –ª—é–±–∏–º—ã–µ —Ç—Ä–µ–∫–∏ –≤ –±–æ—Ç–µ</a> üëà")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–ª–æ–∂–∫–∞, —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –µ–µ
        thumbnail = None
        if artwork_url:
            try:
                logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏")
                # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É
                async with aiohttp.ClientSession() as session:
                    async with session.get(artwork_url) as response:
                        if response.status == 200:
                            thumbnail_data = await response.read()
                            thumbnail = BufferedInputFile(
                                thumbnail_data,
                                filename="thumbnail.jpg"
                            )
                            logger.info("–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±–ª–æ–∂–∫—É: {e}")
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –æ–±–ª–æ–∂–∫—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ–µ
                pass
        
        logger.info("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        await callback.message.answer_audio(
            audio=audio_file,
            caption=caption,
            title=track_title,
            performer=artist,
            thumbnail=thumbnail,
            parse_mode=ParseMode.HTML
        )
        
        logger.info("–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞: {str(e)}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await show_tracks_page(user_id, current_page)
        await callback.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞", show_alert=True)

@dp.callback_query(F.data.startswith("page_"))
async def process_page_navigation(callback: types.CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[1])
    page = int(parts[2])
    
    if user_id != callback.from_user.id:
        await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à –ø–æ–∏—Å–∫!", show_alert=True)
        return
        
    if user_id not in user_search_results:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∏. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫.", show_alert=True)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await show_tracks_page(user_id, page)
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–∫–æ—Ç–æ—Ä–∞—è –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç)
@dp.callback_query(F.data == "noop")
async def process_noop(callback: types.CallbackQuery):
    await callback.answer("–¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")

    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 